// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(cuid())
  clerkId    String    @unique
  username   String    @unique
  createdAt  DateTime  @default(now())
  profile    Profile?
  stories    Story[]
  comments   Comment[]
  votes      Vote[]
  favorites  Favorite[]
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  about     String   @default("")
  karma     Int      @default(0)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Story {
  id           Int        @id @default(autoincrement())
  title        String
  url          String?
  text         String?
  authorId     String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  score        Int        @default(0)
  descendants  Int        @default(0)
  type         StoryType  @default(TOP)
  author       User       @relation(fields: [authorId], references: [id])
  comments     Comment[]
  votes        Vote[]
  favorites    Favorite[]

  @@index([createdAt])
  @@index([score])
  @@index([type])
}

enum StoryType {
  TOP
  NEW
  BEST
  ASK
  SHOW
  JOB
}

model Comment {
  id        Int       @id @default(autoincrement())
  storyId   Int
  authorId  String
  parentId  Int?
  text      String
  createdAt DateTime  @default(now())
  story     Story     @relation(fields: [storyId], references: [id])
  author    User      @relation(fields: [authorId], references: [id])
  parent    Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  children  Comment[] @relation("CommentToComment")

  @@index([storyId])
  @@index([authorId])
  @@index([parentId])
}

model Vote {
  userId   String
  storyId  Int
  createdAt DateTime @default(now())
  user     User   @relation(fields: [userId], references: [id])
  story    Story  @relation(fields: [storyId], references: [id])

  @@id([userId, storyId])
  @@index([storyId])
}

model Favorite {
  userId   String
  storyId  Int
  createdAt DateTime @default(now())
  user     User   @relation(fields: [userId], references: [id])
  story    Story  @relation(fields: [storyId], references: [id])

  @@id([userId, storyId])
  @@index([storyId])
}
